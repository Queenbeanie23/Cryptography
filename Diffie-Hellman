# Function to check if a number is a perfect square
def is_perfect_square(n):
    return n == int(n ** 0.5) ** 2

# Function to find the order of a point on the elliptic curve
def find_order(a, p, x, y):
    order = 1
    point = (x, y)
    while True:
        point = add_points(point, (x, y), a, p)
        order += 1
        if point is not None and point[0] is None and point[1] is None:
    # Your code here
            break
    return order

# Function to add two points on the elliptic curve
def add_points(p1, p2, a, p):
    if p1 is None or p1[0] is None or p1[1] is None:
        return p2
    if p2 is None or p2[0] is None or p2[1] is None:
        return p1
    x1, y1 = p1
    x2, y2 = p2

    if p1 != p2:
        if (x2 - x1) % p == 0:
            return None
        m = (y2 - y1) * pow(x2 - x1, -1, p) % p
    else:
        if (2 * y1) % p == 0:
            return None
        m = (3 * x1 ** 2 + a) * pow(2 * y1, -1, p) % p
        x3 = (m ** 2 - x1 - x2) % p
        y3 = (m * (x1 - x3) - y1) % p

        return (x3, y3)

# Function to find a generator point on the elliptic curve
def find_generator(a, p, max_iterations=30):
    for x in range(1, max_iterations + 1):
        y_sq = (x ** 3 + a * x + 9) % p
        if is_perfect_square(y_sq):
            y = int(y_sq ** 0.5) % p
            order = find_order(a, p, x, y)
            return (x, y, order)

    return None

# Parameters for the elliptic curve
a = 10
p = 8011

# Find a generator point
generator_point = find_generator(a, p)
print("Generator Point (x, y, order):", generator_point)
